You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0



-------------------DFS---------------------

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        w, h = len(grid), len(grid[0])
        max_area = 0
        
        def get_area(i, j):
            if i >= w or j >= h or i < 0 or j < 0 or grid[i][j] == 0:
                return 0 
            grid[i][j] = 0
            
            return 1 + get_area(i+1, j) + get_area(i, j+1) + get_area(i-1, j) + get_area(i, j-1)
            
        
        for i in range(w):
            for j in range(h):
                max_area = max(max_area, get_area(i, j))
                
                    
        return max_area
        
